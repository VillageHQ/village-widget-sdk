export class App {
    constructor(partnerKey: any, config: any);
    partnerKey: any;
    userReference: any;
    token: any;
    config: any;
    url: any;
    module: any;
    iframe: Iframe | null;
    observer: MutationObserver | null;
    inlineSearchIframes: Map<any, any>;
    messageHandlers: MessageHandlers;
    moduleHandlers: ModuleHandlers;
    apiUrl: any;
    hasRenderedButton: boolean;
    init(): Promise<void>;
    setupMessageHandlers(): void;
    setupMutationObserver(): void;
    handleMutations(mutations: any): void;
    handleAttributeChange(mutation: any): void;
    handleNewElements(mutation: any): void;
    hasVillageAttributes(element: any): any;
    addListenerToElement(element: any): Promise<void>;
    getUser(): Promise<void>;
    handleOAuthRequest(): void;
    handleOAuthSuccess(data: any): void;
    _refreshInlineSearchIframes(): void;
    handleOAuthError(data: any): void;
    handleRemoveIframe(): void;
    handleIframeLoaded(): void;
    scanExistingElements(): void;
    checkPaths(url: any): Promise<any>;
    getButtonChildren(element: any): {
        foundElement: any;
        notFoundElement: any;
        loadingElement: any;
    };
    initializeButtonState(element: any): void;
    checkPathsAndUpdateButton(element: any, url: any): Promise<void>;
    addFacePilesAndCount(element: any, relationship: any): void;
    updateButtonContent(element: any, relationship: any): void;
    renderIframe(): void;
    setUserReference(userReference: any, details?: null): Promise<any>;
    upsertTeam(team: any): Promise<void>;
    destroy(): void;
    refreshSyncUrlElements(): void;
    logout(): Promise<void>;
}
import { Iframe } from "./iframe";
import { MessageHandlers } from "./handlers/MessageHandlers";
import { ModuleHandlers } from "./handlers/ModuleHandlers";
